/*===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */
package gov.nih.nlm.ncbi.blastjni;

import java.io.Serializable;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.*;
import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.json.JSONObject;

class BLAST_QUERY implements Serializable {
  // From JSON request
  private String protocol;
  private String rid;
  private String db_tag;
  private String db_selector;
  private int top_N_prelim;
  private int top_N_traceback;
  private String query_seq;
  private String query_url;
  private String program;
  private String blast_params;
  private Timestamp starttime;
  // Partitioned
  private int partition_num;
  // HSPs from prelim_search
  private int oid;
  private int max_score;
  private byte[] hsp_blob;
  // Tracebacks from traceback
  private double evalue;
  private byte[] asn1_blob;

  public BLAST_QUERY() {}

  // Copy Constructor
  public BLAST_QUERY(BLAST_QUERY in) {
    protocol = in.protocol;
    rid = in.rid;
    db_selector = in.db_selector;
    db_tag = in.db_tag;
    top_N_prelim = in.top_N_prelim;
    top_N_traceback = in.top_N_traceback;
    query_seq = in.query_seq;
    query_url = in.query_url;
    program = in.program;
    blast_params = in.blast_params;
    starttime = in.starttime;
    partition_num = in.partition_num;
    oid = in.oid;
    max_score = in.max_score;
    hsp_blob = in.hsp_blob; // arraycopy?
    evalue = in.evalue;
    asn1_blob = in.asn1_blob;
  }

  public BLAST_QUERY(String jsonString) {
    Logger logger = LogManager.getLogger(BLAST_QUERY.class);

    JSONObject json = new JSONObject(jsonString);
    try {
      protocol = json.optString("protocol", "");
      if (protocol.equals("1.0")) {
        rid = json.optString("RID", "");
        db_tag = json.optString("db_tag", "");
        db_selector = db_tag.substring(0, 2); // json.optString("db_selector", "");
        top_N_prelim = json.optInt("top_N_prelim", 0);
        top_N_traceback = json.optInt("top_N_traceback", 0);
        query_seq = json.optString("query_seq", "");
        query_url = json.optString("query_url", "");
        program = json.optString("program", "");
        blast_params = json.optString("blast_params", "");

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        Date parsedDate = dateFormat.parse(json.optString("StartTime", "1980-01-01T01:00:00.0"));
        starttime = new java.sql.Timestamp(parsedDate.getTime());

        oid = json.optInt("oid", 0);
        partition_num = json.optInt("partition_num", 0);
        max_score = json.optInt("max_score", 0);
        hsp_blob = Base64.getDecoder().decode(json.optString("hsp_blob", ""));
        evalue = json.optDouble("evalue");
        asn1_blob = Base64.getDecoder().decode(json.optString("asn1_blob", ""));
      } else logger.log(Level.ERROR, "Unknown JSON protocol: " + protocol);

    } catch (Exception e) {
    }
  }

  // Auto-generated by IntelliJ
  public boolean equals(final Object object) {
    if (this == object) return true;
    if (object == null || getClass() != object.getClass()) return false;
    if (!super.equals(object)) return false;
    final BLAST_QUERY that = (BLAST_QUERY) object;
    return top_N_prelim == that.top_N_prelim
        && top_N_traceback == that.top_N_traceback
        && oid == that.oid
        && partition_num == that.partition_num
        && max_score == that.max_score
        && Double.compare(that.evalue, evalue) == 0
        && java.util.Objects.equals(protocol, that.protocol)
        && java.util.Objects.equals(rid, that.rid)
        && java.util.Objects.equals(db_tag, that.db_tag)
        && java.util.Objects.equals(db_selector, that.db_selector)
        && java.util.Objects.equals(query_seq, that.query_seq)
        && java.util.Objects.equals(query_url, that.query_url)
        && java.util.Objects.equals(program, that.program)
        && java.util.Objects.equals(blast_params, that.blast_params)
        && java.util.Objects.equals(starttime, that.starttime)
        && java.util.Arrays.equals(hsp_blob, that.hsp_blob)
        && java.util.Arrays.equals(asn1_blob, that.asn1_blob);
  }

  // Auto-generated by IntelliJ
  public int hashCode() {
    int result =
        java.util.Objects.hash(
            super.hashCode(),
            protocol,
            rid,
            db_tag,
            db_selector,
            top_N_prelim,
            top_N_traceback,
            query_seq,
            query_url,
            program,
            blast_params,
            starttime,
            oid,
            partition_num,
            max_score,
            evalue);
    result = 31 * result + java.util.Arrays.hashCode(hsp_blob);
    result = 31 * result + java.util.Arrays.hashCode(asn1_blob);
    return result;
  }

  String getProtocol() {

    return protocol;
  }

  void setProtocol(final String protocol) {
    this.protocol = protocol;
  }

  String getRid() {
    return rid;
  }

  void setRid(final String rid) {
    this.rid = rid;
  }

  String getDb_tag() {
    return db_tag;
  }

  void setDb_tag(final String db_tag) {
    this.db_tag = db_tag;
  }

  String getDb_selector() {
    return db_selector;
  }

  void setDb_selector(final String db_selector) {
    this.db_selector = db_selector;
  }

  int getTop_N_prelim() {
    return top_N_prelim;
  }

  void setTop_N_prelim(final int top_N_prelim) {
    this.top_N_prelim = top_N_prelim;
  }

  int getTop_N_traceback() {
    return top_N_traceback;
  }

  void setTop_N_traceback(final int top_N_traceback) {
    this.top_N_traceback = top_N_traceback;
  }

  String getQuery_seq() {
    return query_seq;
  }

  void setQuery_seq(final String query_seq) {
    this.query_seq = query_seq;
  }

  String getQuery_url() {
    return query_url;
  }

  void setQuery_url(final String query_url) {
    this.query_url = query_url;
  }

  String getProgram() {
    return program;
  }

  void setProgram(final String program) {
    this.program = program;
  }

  String getBlast_params() {
    return blast_params;
  }

  void setBlast_params(final String blast_params) {
    this.blast_params = blast_params;
  }

  Timestamp getStarttime() {
    return starttime;
  }

  void setStarttime(final Timestamp starttime) {
    this.starttime = starttime;
  }

  int getOid() {
    return oid;
  }

  void setOid(final int oid) {
    this.oid = oid;
  }

  int getPartition_num() {
    return partition_num;
  }

  void setPartition_num(final int partition_num) {
    this.partition_num = partition_num;
  }

  int getMax_score() {
    return max_score;
  }

  void setMax_score(final int max_score) {
    this.max_score = max_score;
  }

  byte[] getHsp_blob() {
    return hsp_blob;
  }

  void setHsp_blob(final byte[] hsp_blob) {
    this.hsp_blob = hsp_blob;
  }

  double getEvalue() {
    return evalue;
  }

  void setEvalue(final double evalue) {
    this.evalue = evalue;
  }

  byte[] getAsn1_blob() {
    return asn1_blob;
  }; // Null constructor for Bean

  void setAsn1_blob(final byte[] asn1_blob) {
    this.asn1_blob = asn1_blob;
  }

  @Override
  public String toString() {
    // for x in
    // ["protocol","rid","db_tag","db_selector",
    // "top_N_prelim","top_N_traceback","query_seq","query_url","program","blast_params","starttime","oid","max_score","hsp_blob","evalue","asn1_blob"]:
    //  print "json.put(\"" + x + "\", " + x + ");"

    JSONObject json = new JSONObject(this);
    json.put("protocol", protocol);
    json.put("RID", rid);
    json.put("db_tag", db_tag);
    json.put("db_selector", db_selector);
    json.put("top_N_prelim", top_N_prelim);
    json.put("top_N_traceback", top_N_traceback);
    json.put("query_seq", query_seq);
    json.put("query_url", query_url);
    json.put("program", program);
    json.put("blast_params", blast_params);
    json.put("StartTime", starttime);
    json.put("oid", oid);
    json.put("max_score", max_score);
    // New String(Base64.getEncoder().encode(), StandardCharsets.UTF_8);
    json.put("hsp_blob", hsp_blob);
    json.put("evalue", evalue);
    json.put("asn1_blob", asn1_blob);
    return json.toString();
  }
}
