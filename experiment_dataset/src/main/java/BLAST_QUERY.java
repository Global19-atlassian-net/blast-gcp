/*===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */
package gov.nih.nlm.ncbi.blastjni;

import java.io.Serializable;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.*;
import org.json.JSONObject;

class BLAST_QUERY implements Serializable {
    // From JSON request
    private String protocol;
    private String RID;
    private String db_tag;
    private int top_N_prelim;
    private int top_N_traceback;
    private String query_seq;
    private String query_url;
    private String program;
    private String blast_params;
    private Timestamp StartTime;
    // HSPs from prelim_search
    private int oid;
    private int max_score;
    private byte[] hsp_blob;
    // Tracebacks from traceback
    private double evalue;
    private byte[] asn1_blob;

    public BLAST_QUERY() {}

    public BLAST_QUERY(String jsonString) {
        JSONObject json = new JSONObject(jsonString);
        try {
            protocol = json.getString("protocol");
            RID = json.getString("RID");
            db_tag = json.getString("db_tag");
            top_N_prelim = json.getInt("top_N_prelim");
            top_N_traceback = json.getInt("top_N_traceback");
            query_seq = json.getString("query_seq");
            query_url = json.getString("query_url");
            program = json.getString("program");
            blast_params = json.getString("blast_params");

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
            Date parsedDate = dateFormat.parse(json.getString("StartTime"));
            StartTime = new java.sql.Timestamp(parsedDate.getTime());

            oid = json.getInt("oid");
            max_score = json.getInt("max_score");
            hsp_blob = Base64.getDecoder().decode(json.getString("hsp_blob"));
            evalue = json.getDouble("evalue");
            asn1_blob = Base64.getDecoder().decode(json.getString("asn1_blob"));
        } catch (Exception e) {
        }
    }

    // Auto-generated by IntelliJ
    public boolean equals(final Object object) {
        if (this == object) return true;
        if (object == null || getClass() != object.getClass()) return false;
        if (!super.equals(object)) return false;
        final BLAST_QUERY that = (BLAST_QUERY) object;
        return top_N_prelim == that.top_N_prelim
            && top_N_traceback == that.top_N_traceback
            && oid == that.oid
            && max_score == that.max_score
            && Double.compare(that.evalue, evalue) == 0
            && java.util.Objects.equals(protocol, that.protocol)
            && java.util.Objects.equals(RID, that.RID)
            && java.util.Objects.equals(db_tag, that.db_tag)
            && java.util.Objects.equals(query_seq, that.query_seq)
            && java.util.Objects.equals(query_url, that.query_url)
            && java.util.Objects.equals(program, that.program)
            && java.util.Objects.equals(blast_params, that.blast_params)
            && java.util.Objects.equals(StartTime, that.StartTime)
            && java.util.Arrays.equals(hsp_blob, that.hsp_blob)
            && java.util.Arrays.equals(asn1_blob, that.asn1_blob);
    }

    // Auto-generated by IntelliJ
    public int hashCode() {
        int result =
            java.util.Objects.hash(
                    super.hashCode(),
                    protocol,
                    RID,
                    db_tag,
                    top_N_prelim,
                    top_N_traceback,
                    query_seq,
                    query_url,
                    program,
                    blast_params,
                    StartTime,
                    oid,
                    max_score,
                    evalue);
        result = 31 * result + java.util.Arrays.hashCode(hsp_blob);
        result = 31 * result + java.util.Arrays.hashCode(asn1_blob);
        return result;
    }

    String getProtocol() {

        return protocol;
    }

    void setProtocol(final String protocol) {
        this.protocol = protocol;
    }

    String getRID() {
        return RID;
    }

    void setRID(final String RID) {
        this.RID = RID;
    }

    String getDb_tag() {
        return db_tag;
    }

    void setDb_tag(final String db_tag) {
        this.db_tag = db_tag;
    }

    int getTop_N_prelim() {
        return top_N_prelim;
    }

    void setTop_N_prelim(final int top_N_prelim) {
        this.top_N_prelim = top_N_prelim;
    }

    int getTop_N_traceback() {
        return top_N_traceback;
    }

    void setTop_N_traceback(final int top_N_traceback) {
        this.top_N_traceback = top_N_traceback;
    }

    String getQuery_seq() {
        return query_seq;
    }

    void setQuery_seq(final String query_seq) {
        this.query_seq = query_seq;
    }

    String getQuery_url() {
        return query_url;
    }

    void setQuery_url(final String query_url) {
        this.query_url = query_url;
    }

    String getProgram() {
        return program;
    }

    void setProgram(final String program) {
        this.program = program;
    }

    String getBlast_params() {
        return blast_params;
    }

    void setBlast_params(final String blast_params) {
        this.blast_params = blast_params;
    }

    Timestamp getStartTime() {
        return StartTime;
    }

    void setStartTime(final Timestamp startTime) {
        StartTime = startTime;
    }

    int getOid() {
        return oid;
    }

    void setOid(final int oid) {
        this.oid = oid;
    }

    int getMax_score() {
        return max_score;
    }

    void setMax_score(final int max_score) {
        this.max_score = max_score;
    }

    byte[] getHsp_blob() {
        return hsp_blob;
    }

    void setHsp_blob(final byte[] hsp_blob) {
        this.hsp_blob = hsp_blob;
    }

    double getEvalue() {
        return evalue;
    }

    void setEvalue(final double evalue) {
        this.evalue = evalue;
    }

    byte[] getAsn1_blob() {
        return asn1_blob;
    }; // Null constructor for Bean

    void setAsn1_blob(final byte[] asn1_blob) {
        this.asn1_blob = asn1_blob;
    }

    @Override
    public String toString() {
        // for x in
        // ["protocol","RID","db_tag","top_N_prelim","top_N_traceback","query_seq","query_url","program","blast_params","StartTime","oid","max_score","hsp_blob","evalue","asn1_blob"]:
        //  print "json.put(\"" + x + "\", " + x + ");"

        JSONObject json = new JSONObject(this);
        json.put("protocol", protocol);
        json.put("RID", RID);
        json.put("db_tag", db_tag);
        json.put("top_N_prelim", top_N_prelim);
        json.put("top_N_traceback", top_N_traceback);
        json.put("query_seq", query_seq);
        json.put("query_url", query_url);
        json.put("program", program);
        json.put("blast_params", blast_params);
        json.put("StartTime", StartTime);
        json.put("oid", oid);
        json.put("max_score", max_score);
        // New String(Base64.getEncoder().encode(), StandardCharsets.UTF_8);
        json.put("hsp_blob", hsp_blob);
        json.put("evalue", evalue);
        json.put("asn1_blob", asn1_blob);
        return json.toString();
    }
}
